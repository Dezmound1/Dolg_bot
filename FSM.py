from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.types import callback_query
from aiogram.utils.callback_data import *
from Module import dp, bot, KB
import re
import cfg
import KB_info
import sql
import fun
import json









class student_FSM(StatesGroup):
    subject = State()
    FSMinfo = State()
    groupe = State()
    name = State()
    number = State()
    birth = State()
    passport_num = State()
    passport_give = State()
    passport_date = State()
    passport_code = State()
    passport_addres = State()




#@dp.message_handler(NUM())
#async def check_NUM(msg: types.Message) -> None:
 #   await None


@dp.message_handler(commands=['cancel'])
async def cmd_cancel(message: types.Message, state= FSMContext):
    await state.finish()
#    await callback.message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥', reply_markup=KB.Stud_hello)
async def cmd_cancel2(callback: types.CallbackQuery, state = FSMContext):
    await state.finish()
    await callback.message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥', reply_markup=KB.Stud_hello)
async def cmd_cancel3(callback: types.CallbackQuery, state = FSMContext):
    await student_FSM.FSMinfo.set()
    await callback.message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥', reply_markup=KB_info.function_for_stud)




async def subject_FSM(callback: types.CallbackQuery, state= student_FSM.subject):
    async with state.proxy() as data:
        data['subject_info'] = fun.subjects_dict[int(callback.data)] # –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ json
        data['subject_callback'] = callback.data
    if sql.db_profile_exist(callback.from_user.id, data['subject_info']):
        await callback.message.edit_text("–í—ã —É–∂–µ –∑–∞–ø–∏—Å—ã–≤–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç –∫—Ä—É—Å, —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å—Å—è?", reply_markup= KB.Qwestion_butt)
    else:
        await callback.message.edit_text('–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ', reply_markup=KB_info.function_for_stud)
        await student_FSM.next()

# print('this is ', fun.subjects_dict)
# print(fun.subjects_dict[3])





async def answer_yes(callback: types.CallbackQuery, state= student_FSM.subject):
    await callback.message.edit_text('–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ', reply_markup= KB_info.function_for_stud)
    await student_FSM.next()

async def answer_no(callback: types.CallbackQuery, state= student_FSM.subject):
    await callback.message.answer("–í—ã–±–∏—Ä–µ—Ç–µ –¥—Ä—É–≥–æ–π –∫—É—Ä—Å!", reply_markup= KB.KB_subject_info)
    await subject_FSM()



async def date_time(callback: types.CallbackQuery, state= student_FSM.FSMinfo):
    async with state.proxy() as data:
        data["data_type"] = callback.data
    with open("data.json", 'r', encoding='utf-8') as file:
        turn_on = json.load(file) # –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å
        take = turn_on[data['subject_callback']]["schedule"]
    await callback.message.edit_text(f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ <b>–¥–∞—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫—É—Ä—Å–∞</b> {data["subject_info"]}\n–ö—É—Ä—Å –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è {take} ', reply_markup= KB_info.back_to_function_for_stud )


async def cost(callback: types.CallbackQuery, state= student_FSM.FSMinfo):
    async with state.proxy() as data:
        data["data_type"] = callback.data
    with open("data.json", 'r', encoding='utf-8') as hf:
        turn_on = json.load(hf)
        take = turn_on[data['subject_callback']]["cost"]
    await callback.message.edit_text(f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ <b>—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫—É—Ä—Å–∞</b> {data["subject_info"]}\n–ö—É—Ä—Å —Å—Ç–æ–∏—Ç: {take} —Ä—É–±–ª–µ–π', reply_markup=KB_info.back_to_function_for_stud)

async def num(callback: types.CallbackQuery, state= student_FSM.FSMinfo):
    async with state.proxy() as data:
        data["data_type"] = callback.data
    with open("data.json", 'r', encoding='utf-8') as hf:
        turn_on = json.load(hf)
        take = turn_on[data['subject_callback']]["room"]
    await callback.message.edit_text(f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ <b>–Ω–æ–º–µ—Ä–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∫—É—Ä—Å–∞</b> {data["subject_info"]}\n–ö—É—Ä—Å –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏: {take}', reply_markup=KB_info.back_to_function_for_stud)

async def teacher(callback: types.CallbackQuery, state= student_FSM.FSMinfo):
    async with state.proxy() as data:
        data["data_type"] = callback.data
    with open("data.json", 'r', encoding='utf-8') as hf:
        turn_on = json.load(hf)
        take = turn_on[data['subject_callback']]["teacher"]
    await callback.message.edit_text(f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ <b>–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ</b> {data["subject_info"]}\n–ö—É—Ä—Å –ø—Ä–æ–≤–æ–¥–∏—Ç: {take}', reply_markup=KB_info.back_to_function_for_stud)

async def comment(callback: types.CallbackQuery, state= student_FSM.FSMinfo):
    async with state.proxy() as data:
        data["data_type"] = callback.data
    with open("data.json", 'r', encoding='utf-8') as hf:
        turn_on = json.load(hf)
        take = turn_on[data['subject_callback']]["comment"]
    await callback.message.edit_text(f'<b>–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫—É—Ä—Å–∞</b> {data["subject_info"]}\n{take}', reply_markup=KB_info.back_to_function_for_stud)



#–ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def load_kurs(callback: types.CallbackQuery, state= student_FSM.FSMinfo):
    await callback.message.edit_text (f'üëâ<b>–£–±–µ–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å—å–±–∞, –≤–≤–æ–¥–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>üëà'
                                      f'\n\n–£–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ—é –≥—Ä—É–ø–ø—É!\n–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: –ë–ò–ù-19-2, –ë–¢–õ-22-–ñ–ú1')
    await student_FSM.next()


async def groupe_FSM(message: types.Message, state=student_FSM.groupe):
    async with state.proxy() as data:
        data['num_groupe'] = message.text
    # print(f"{data['num_groupe']}")
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–µ –§–ò–û! –ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:\n–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á')

    await student_FSM.next()


async def cmd_signal(message: types.Message, state=student_FSM.name):
    name = re.fullmatch(r'(\w{2,})+[ ]+(\w{2,})+[ ]+(\w{2,})', message.text)
    if name:
        async with state.proxy() as data:
            data['name'] = message.text
        await bot.send_sticker(message.from_user.id,
                                       sticker= "CAACAgIAAxkBAAIj2GP_S3KDjec7QiMVaphLRRgaWNsxAAJBAAMoD2oU8OnTI3UcRmEuBA")
        await message.answer(f"–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, {data['name']}\n –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: +79123456789, –ª–∏–±–æ 89123456789")
        await bot.send_sticker(message.from_user.id,
                                       sticker= "CAACAgIAAxkBAAIj2mP_TBhyuzKOf8s5_ZKXP2_ZIDUeAAI_AAMoD2oUaqAv_15u_XkuBA")
        await student_FSM.next()

    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –§–ò–û, –æ–±—Ä–∞–∑–µ—Ü –≤—ã—à–µ!")


async def number_FSM(message: types.Message, state=student_FSM.number):

    match = re.fullmatch(r'(([+]+79)|89)+\d{9}', message.text)
    if match:
        async with state.proxy() as data:
            data['number'] = message.text
        await message.answer(f"{data['name']}, –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è!\n–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: DD.MM.YYYY")
        await student_FSM.next()

    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –æ–±—Ä–∞–∑–µ—Ü –≤–≤–æ–¥–∞ –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤—ã—à–µ.")


async def date_of_birth(message: types.Message, state=student_FSM.birth): #datetime
    date = re.fullmatch(r'(([0-2][1-9])|3+[0-1])+[.]+((0+[1-9])|[10-12])+[.]+(200+[0-8])', message.text)
    if date:
        async with state.proxy() as data:
            data['date_birth'] = message.text
        await message.answer(f"–ò —Å–Ω–æ–≤–∞ –ø–æ–±–µ–¥–∞, {data['name']}, —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –æ—Ñ–æ—Ä–º–∏–º –Ω–∞ —Ç–µ–±—è –∫—Ä–µ–¥–∏—Ç!\n –£–∫–∞–∂–∏ —Å–≤–æ–∏ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!\n–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä!\n–ü—Ä–∏–º–µ—Ä: 2025 126661")
        await student_FSM.next()
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')



async def passport_NUM_FSM(message: types.Message, state=student_FSM.passport_num): #—Å–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞
    num = re.fullmatch(r'(\d{2})+(\d{2})+[ ]+(\d{6})', message.text)
    if num:
         async with state.proxy() as data:
            data['passport_NUM'] = message.text
         await message.answer(f"–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, {data['name']}, —É–∫–∞–∂–∏—Ç–µ –∫–µ–º –±—ã–ª –≤—ã–¥–∞–Ω –ø–∞—Å—Å–ø–æ—Ä—Ç!") #—Ñ–æ—Ä–º—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!
         await student_FSM.next()
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")




async def passport_GIVE_FSM(message: types.Message, state=student_FSM.passport_give): #–¥–∞–Ω–Ω—ã–µ –æ –≤—ã–¥–∞—á–∏ –ø–∞—Å—Å–ø–æ—Ä—Ç–∞

    async with state.proxy() as data:
        data['passport_GIVE'] = message.text
    await  message.answer("–£–∫–∞–∂–∏ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –ø–∞—Å—Å–ø–æ—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!\n–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: DD.MM.YYYY")
    await student_FSM.next()




async def passport_DATE_FSM(message: types.Message,state= student_FSM.passport_date): #—É–∫–∞–∑–∞—Ç—å —ã–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≥–æ–¥–∞ !!!
    date = re.fullmatch(r'(([0-2][1-9])|3+[0-1])+[.]+((0+[1-9])|[10-12])+[.]+((201+[5-9])|(202+[0-5]))', message.text)
    if date:
        async with state.proxy() as data:
            data['passport_DATE'] = message.text
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è, –≤—ã–¥–∞–≤—à–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç!!\n–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: 250-006")
        await student_FSM.next()
    else:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–º–µ—Ä—É –≤—ã—à–µ!")




async def passport_CODE_FSM(message: types.Message,state= student_FSM.passport_code):
    code = re.fullmatch(r'(\d{3})+[-]+(\d{3})', message.text)
    if code:
        async with state.proxy() as data:
            data['passport_CODE'] = message.text
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!\n–§–æ—Ä–º–∞—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: –°—Ç—Ä–∞–Ω–∞, –æ–±–ª–∞—Å—Ç—å, –≥–æ—Ä–æ–¥, –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç(–µ—Å–ª–∏ –µ—Å—Ç—å), —É–ª–∏—Ü–∞, –¥–æ–º.")
        await student_FSM.next()
    else:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–º–µ—Ä—É –≤—ã—à–µ!")




async def passport_ADRES_FSM(message: types.Message, state=student_FSM.passport_addres): # –æ–±—â–∞—è —Ä–∞–±–æ—á–∞—è –º–æ–¥–µ–ª—å –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    async with state.proxy() as data:
        data['passport_ADRES'] = message.text
    await bot.send_sticker(message.from_user.id,
                           sticker="CAACAgIAAxkBAAIj3GP_VJcD_TNq8yvS7B5V3iejLPpuAAKNFgACHBsoSM3ElsDvm8gELgQ"
                           )

    await state.finish()
    # print(f"{data['subject_info']} ,{data['num_groupe']} ,{data['name']} ,{data['number'].strip('+')},{data['date_birth'].replace('.','')} , {data['passport_NUM'].replace(' ','')} ,{data['passport_GIVE']}, {data['passport_DATE'].replace('.','')} , {data['passport_CODE'].replace('-','')} ,{data['passport_ADRES']}")
    if sql.db_profile_exist(message.from_user.id, data['subject_info']):
        await message.answer("–ú—ã –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–ª–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ")
    else:
        sql.db_profile_insertone({"id": message.from_user.id,
                                  'grup_name': data['num_groupe'],
                                  'fio': data['name'],
                                  'phone': data['number'].strip('+'),
                                  'date_bith': data['date_birth'].replace('.',''),
                                  'passport': data['passport_NUM'].replace(' ',''),
                                  'kem_vid': data['passport_GIVE'],
                                  'date_pas': data['passport_DATE'].replace('.',''),
                                  'kod_pod': data['passport_CODE'].replace('-',''),
                                  'reg_reg': data['passport_ADRES'],
                                  'subject': data['subject_info']})

    await message.answer(cfg.message_for_student, reply_markup= KB.end_but)


# async with state.proxy() as data:
#     data['edit_info'] = message.text
# print(data['edit_info'])
# with open("data.json", 'r', encoding='utf-8') as hf:
#     turn_on = json.load(hf)




def FSM_hendlers():

    dp.register_message_handler(cmd_cancel, commands= 'cancel', state= '*')
    dp.register_callback_query_handler(answer_yes, text='Yes', state= student_FSM.subject)
    dp.register_callback_query_handler(answer_no, text='No', state= student_FSM.subject)
    dp.register_callback_query_handler(cmd_cancel2, text= 'back_from_list', state= '*')
    dp.register_callback_query_handler(cmd_cancel3, text='back_is_all', state = '*')
    dp.register_callback_query_handler(subject_FSM, state= student_FSM.subject)
    dp.register_callback_query_handler(load_kurs, text='kurs', state= student_FSM.FSMinfo)
    dp.register_callback_query_handler(date_time, text='date_time', state= student_FSM.FSMinfo)
    dp.register_callback_query_handler(cost, text= 'cost', state= student_FSM.FSMinfo)
    dp.register_callback_query_handler(num, text='num', state= student_FSM.FSMinfo)
    dp.register_callback_query_handler(teacher, text='teacher', state= student_FSM.FSMinfo)
    dp.register_callback_query_handler(comment, text='comment', state= student_FSM.FSMinfo)
    dp.register_message_handler(groupe_FSM, state= student_FSM.groupe)
    dp.register_message_handler(cmd_signal, state= student_FSM.name)
    dp.register_message_handler(number_FSM, state= student_FSM.number)
    dp.register_message_handler(date_of_birth, state= student_FSM.birth)
    dp.register_message_handler(passport_NUM_FSM, state= student_FSM.passport_num)
    dp.register_message_handler(passport_GIVE_FSM, state= student_FSM.passport_give)
    dp.register_message_handler(passport_DATE_FSM, state= student_FSM.passport_date)
    dp.register_message_handler(passport_CODE_FSM, state= student_FSM.passport_code)
    dp.register_message_handler(passport_ADRES_FSM, state=student_FSM.passport_addres)

